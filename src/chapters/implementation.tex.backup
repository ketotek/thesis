\chapter{Implementing the OpenFlow Bundles}
\label{chapter:impl}  
 
 

\begin{figure}[h]
\begin{center}
\includegraphics[scale=0.5]{src/img/bundle-content.eps}
\end{center}
\caption{Data Structures Used by a Bundle}
\label{fig:bundles}
\end{figure}

For each OpenFlow connection we may have several bundles open at the same time. Moreover, bundles from different connections
can have the same identifiers. We use a hash table per connection to hold all the active bundles and hashing is done for 
the bundle ID. An example of the data structures that we will be using to implement bundles and the relations between
them are shown in Figure~\ref{fig:bundles}.

A bundle will always be in one the two states: \texttt{BS_OPEN} or \texttt{BS_CLOSED}.

Each message added to a bundle is checked and the decoded version is cached in a list of messages.
For port-mod messages, the staging area is made of copies of \texttt{struct ofport} representing the ports that
will be modified by each message in a bundle. These structures are linked in a list and attached to the corresponding bundle.
The specification says that when the flag \texttt{OFPBF_ORDERED} is used, the messages should be processed in order.
However, we do this always, the port data structures are modified iteratively by each message in the bundle.

At the commit phase, we apply the changes in the
staging area to the switch and send the needed notifications. From the point of view of the controller, there was only
one operation that did all the changes together. This is possible for port-mod messages because the modified values are mostly
flags so we can easily merge them together with binary operations. These flags are then pushed down to the underlying
network device which controls the configured port.

Handling flow-mod messages in a bundle is more difficult because the changes are spread in multiple parts of the switch.
We cannot create the same type of staging area that we used for port-mod messages. Moreover, flow-mod messages can have
different actions, like adding, modifying or removing flows and so they have to be threated differently.

Adding flows is done by using higher priorities instead of the original priority found in the flow-mod message. This
will force the switch to hide the newly added rule from controllers and will also avoid sending notifications about it.
When we are ready to commit, the rules can be made visible again. In the same way, modifying can be done in 2 steps:
adding new hidden flows and removing the old ones. The actual removing is done only at the time of the commit.

To make sure that the data structures that are to be modified by the messages in a bundle won't change or even dissapear,
we had to take care of concurrent accesses. For each OpenFlow connection, while there are bundles active....